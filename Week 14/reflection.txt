Please respond thoroughly (at least two sentences for each question) to
the following three questions.

1. Describe an experience you had this semester where you saw the power of
functions.
- When I was writing my final program and when I was reflecting back to some of the programs that I wrote in CSE 110, I remember how complicated the program was.
There was A LOT that went into a lot of the programs we made in this class sometimes and without functions, we couldn't logically see how the program was broken up.
The only way we'd be able to break up the program to make it easy to see would be a ton of comment blocks. With functions, we can have each logical "step" broken up
into it's own block, that way we can just stack the blocks together. My final project had a lot of things that it did to manage the tasks. Having the fuctions to break it up
made it leaps and bounds easier to troubleshoot what was going on.

2. In your judgment, what is the value of test functions?
- We can get a huge amount of value from writing test functions. Just today I was talking to Gemini about how teams of huge developers actually all work together on a project.
There are software architects who might take a task/project and divy it up into all the little parts for each developer. Each of these parts will be expecting certain types of data
and they will be expecting certain kinds of output, so a developer might not know how exactly another part works. Only that it gives XYZ info/data.. Now my entire question was
"how can everyone work on the same thing if it's not done?" and tests are a large reason for "why". The tests give everyone a standard to work off of. JimBob needs his code
to return if the string is long enough. Suzy-Q needs to write a function to actually calculate the length. JimBob can't use Suzy-Q's function because it doesn't exist yet, Suzy-Q can't
call JimBobs function yet because it also doesn't exist.. But we know what we need to get from both of them and how we want to get that from both of them. If 
JimBob's code does what it's supposed to and Suzy-Q's code does what it's supposed to, then when they call and use each other, they'll do what they are supposed to.
Tests are invaluable. I didn't really like to write them, but it's so clear now why they are so important. Invaluable. Going on, I think they can make programming easier.
Because again, we know the "answers" we just need to make code that gives the answers. Work backwords.

3. Describe your process for troubleshooting and fixing a program that
has a problem. What is one thing you can do to improve your process?
- My process for troubleshooting has been reading the error messages and trying over and over again. My process would be so much better if I implimented more tests and
broke up my code into more functions that could be ran alone. If I ran my code more often, I could solve the small errors as they arrise - whereas when the codebase starts to
get large and crazy, it's a lot harder to pinpoint what is giving you problems. I think if learned to write more and more tests and learned more about how 
I can make higher quality tests (lots of things that are tried, error messaging, etc.), that would make a world of difference in my process. I could also use the VS Code 
python debugger a little more. It wouldn't hurt me to dig more into that to assist with troubleshooting.